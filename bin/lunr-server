#! /usr/bin/env node

'use strict';

var LunrServer = require('../index');
var fs = require('fs');
var config = require('../lunr-server-config.json');
var option = process.argv[2];
var cfenv = require("cfenv");
var appEnv = cfenv.getAppEnv();
uri = appEnv.getServiceURL("beckley-es");
config.app.port = appEnv.port;


var USAGE = [
  'Usage: ' + process.argv[1] + ' [-hv|print-template|lunr-server-config.json]',
  'Where:',
  '  -h, --help, help         show this help',
  '  -v, --version, version   show version info',
  '  print-template           print an example lunr-server-config-config.json',
  '  lunr-server-config.json  path to a valid lunr-server-config.json file'
].join('\n');

var showHelp = (option === '-h' || option === '--help' || option === 'help'),
    showVersion = (option === '-v' || option === '--version' ||
      option === 'version'),
    printTemplate = (option === 'print-template');

if (showHelp) {
  console.log(USAGE);
} else if (showVersion) {
  console.log(LunrServer.versionString());
} else if (printTemplate) {
  console.log(JSON.stringify(config, null, 2));
}

if (showHelp || showVersion || printTemplate) {
  process.exit(0);
}

if (process.argv.length !== 3) {
  console.error('invalid arguments:', process.argv.slice(2).join(' '));
  console.error(USAGE);
  process.exit(1);
}

new Promise(function(resolve, reject) {
  fs.exists(option, function(exists) {
    if (!exists) {
      reject(new Error('configuration file ' + option + ' does not exist'));
    } else {
      resolve();
    }
  });
})
.then(function() {
  return new Promise(function(resolve, reject) {
    fs.readFile(option, 'utf8', function(err, configData) {
      if (err) {
        reject(new Error('error opening ' + option + ': ' + err.message));
      } else {
        resolve(configData);
      }
    });
  });
})
.then(function(configData) {
  var lunrServer;

  try {
    lunrServer = new LunrServer(JSON.parse(configData), console);
    return lunrServer.launch();
  } catch (err) {
    return Promise.reject(
      new Error('failed to parse ' + option + ': ' + err.message));
  }
})
.catch(function(err) {
  console.error('error launching ' + __filename + ': ' + err.message);
  process.exit(1);
});
